{"version":3,"sources":["countryInfo.js","index.js"],"names":["CountryInfo","_country","_countryInfo","shadowRoot","attachShadow","mode","name","oldValue","newValue","console","log","getCountryInfo","fetch","then","resp","json","createTemplate","catch","err","error","area","alpha3Code","altSpellings","borders","callingCodes","capital","nativeName","population","region","subregion","demonym","timezones","topLevelDomain","latlng","translations","flag","currencies","info","Object","keys","map","elem","sp","trim","template","innerHTML","tagName","val","HTMLElement","customElements","define","button","document","querySelector","input","customElement","value","getAttribute","addEventListener","get","setAttribute","toLowerCase"],"mappings":"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","file":"web-components.e31bb0bc.map","sourceRoot":"..","sourcesContent":["class CountryInfo extends HTMLElement {\n  constructor() {\n    super()\n    this._country = ''\n    this._countryInfo = {}\n    \n    let shadowRoot = this.attachShadow({ mode: 'open' })\n  }\n\n  static get observedAttributes() {\n    return ['country']\n  }\n\n  get country() {\n    return this._country\n  }\n\n  set country(val) {\n    this._country = val\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    console.log('attributeChangedCallback >>', name, oldValue, newValue)\n    switch(name) {\n      case 'country': {\n        this._country = newValue\n        oldValue !== newValue && this.getCountryInfo()\n      }\n    }\n  }\n\n  getCountryInfo() {\n    fetch(`https://restcountries.eu/rest/v2/name/${this._country}?fullText=true`)\n      .then(resp => resp.json())\n      .then(resp => {\n        this._countryInfo = resp[0]\n        this.createTemplate()\n      })\n      .catch(err => console.error(err))\n  }\n\n  createTemplate() {\n    const {\n      name,\n      area,\n      alpha3Code,\n      altSpellings,\n      borders,\n      callingCodes,\n      capital,\n      nativeName,\n      population,\n      region,\n      subregion,\n      demonym,\n      timezones,\n      topLevelDomain,\n      latlng,\n      translations,\n      flag,\n      currencies\n    } = this._countryInfo\n\n    const info = `\n      <img src=${flag} width='300px' />\n\n      <p><b>Name</b>: ${name}</p>\n      <p><b>Area</b>: ${area}</p>\n      <p><b>Alpha3 Code</b>: ${alpha3Code}</p>\n      <p><b>Alt Spellings: </b></p>\n      <p><b>Capital</b>: ${capital}</p>\n      <p><b>Native Name</b>: ${nativeName}</p>\n      <p><b>Population</b>: ${population}</p>\n      <p><b>Region</b>: ${region}</p>\n      <p><b>SubRegion</b>: ${subregion}</p>\n      <p><b>Demonym</b>: ${demonym}</p>\n      <p><b>Latitude</b>: ${latlng[0]}</p>\n      <p><b>Longitude</b>: ${latlng[1]}</p>\n\n      <p><b>Currencies</b>:</p>\n      <ul>\n        ${Object.keys(currencies[0]).map(elem => \n          `<li>${elem}: ${currencies[0][elem]}</li>`\n        )}\n      </ul>      \n\n      <p><b>Alt Spellings</b>:</p>\n      <ul>\n        ${altSpellings.map(elem => `<li>${elem}</li>`)}\n      </ul>\n\n      <p><b>Borders</b>:</p>\n      <ul>\n        ${borders.map(elem => `<li>${elem}</li>`)}\n      </ul>\n\n      <p><b>Calling Codes</b>:</p>\n      <ul>\n        ${callingCodes.map(sp => `<li>${sp.trim()}</li>`)}\n      </ul>\n\n      <p><b>Timezones</b>:</p>\n      <ul>\n        ${timezones.map(elem => `<li>${elem}</li>`)}\n      </ul>\n\n      <p><b>Top Level Domains</b>:</p>\n      <ul>\n        ${topLevelDomain.map(sp => `<li>${sp.trim()}</li>`)}\n      </ul>\n\n     <p><b>Translations</b>:</p>\n      <ul>\n        ${Object.keys(translations).map(sp => `<li>${sp}: ${translations[sp]}</li>`)}\n      </ul>\n    `\n\n    const template = `\n      <h1>COUNTRY INFO:</h1>\n      ${info}\n    `\n\n    this.shadowRoot.innerHTML = template\n  }\n\n  connectedCallback() {\n    console.log(`${this.tagName} mounted from the DOM`)\n  }\n\n  disconnectedCallback() {\n    console.log(`${this.tagName} unmounted from the DOM`)\n  }\n}\n\n// DEFINE OUR CUSTOM ELEMENT\ncustomElements.define('country-info', CountryInfo)\n\n// CHANGE COUNTRY-INFO'S COUNTRY PROP\nconst button = document.querySelector('button')\nconst input = document.querySelector('input[type=\"text\"]')\nconst customElement = document.querySelector('country-info')\n\ninput.value = customElement.getAttribute('country')\n\nbutton.addEventListener('click', function() {\n  const value = input.value\n  if (value && customElements.get('country-info')) {\n    customElement.setAttribute('country', value.toLowerCase())\n  }\n})\n","// import './shadowElement'\n// import './template'\n\nimport './countryInfo'\n"]}